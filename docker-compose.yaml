services:
  mongo1:
    image: mongo:7.0
    container_name: mongo1
    restart: always
    ports:
      - 27017:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    networks:
      - pvsnetwork

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    restart: always
    ports:
      - 27018:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - pvsnetwork

  mongo3:
    image: mongo:7.0
    container_name: mongo3
    restart: always
    ports:
      - 27019:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - pvsnetwork

  rabbitmq:
    image: "rabbitmq:3.13.6-management"
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pvsnetwork

  stock-publisher:
    image: manuelbrunner/stock-publisher:v1.0
    container_name: stock-publisher
    restart: always
    environment:
      RABBITMQ_URL: "${RABBITMQ_URL}"
      TICKER_INTERVAL: "${TICKER_INTERVAL}"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - pvsnetwork

networks:
  pvsnetwork:
    driver: bridge

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:
